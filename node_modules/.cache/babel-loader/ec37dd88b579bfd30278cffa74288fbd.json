{"ast":null,"code":"'use strict';\n\nvar uuid = require('uuid/v4');\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\n\n\nvar generateRequest = function generateRequest(method, params, id, options) {\n  if (typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n  var request = {\n    method: method\n  }; // assume that we are doing a 2.0 request unless specified differently\n\n  if (typeof options.version === 'undefined' || options.version !== 1) {\n    request.jsonrpc = '2.0';\n  }\n\n  if (params) {\n    // params given, but invalid?\n    if (typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n\n    request.params = params;\n  } // if id was left out, generate one (null means explicit notification)\n\n\n  if (typeof id === 'undefined') {\n    var generator = typeof options.generator === 'function' ? options.generator : function () {\n      return uuid();\n    };\n    request.id = generator(request, options);\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;","map":null,"metadata":{},"sourceType":"script"}