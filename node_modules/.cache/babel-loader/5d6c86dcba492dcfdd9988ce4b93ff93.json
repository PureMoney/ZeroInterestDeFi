{"ast":null,"code":"import _regeneratorRuntime from \"/home/ctapang/dapp-scaffold/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ctapang/dapp-scaffold/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nvar ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport function requestLedgerDevice() {\n  return _requestLedgerDevice.apply(this, arguments);\n}\n\nfunction _requestLedgerDevice() {\n  _requestLedgerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var device;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return navigator.usb.requestDevice({\n              filters: ledgerDevices\n            });\n\n          case 2:\n            device = _context.sent;\n            return _context.abrupt(\"return\", device);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestLedgerDevice.apply(this, arguments);\n}\n\nexport function getLedgerDevices() {\n  return _getLedgerDevices.apply(this, arguments);\n}\n\nfunction _getLedgerDevices() {\n  _getLedgerDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var devices;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return navigator.usb.getDevices();\n\n          case 2:\n            devices = _context2.sent;\n            return _context2.abrupt(\"return\", devices.filter(function (d) {\n              return d.vendorId === ledgerUSBVendorId;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getLedgerDevices.apply(this, arguments);\n}\n\nexport function getFirstLedgerDevice() {\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\n\nfunction _getFirstLedgerDevice() {\n  _getFirstLedgerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var existingDevices;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getLedgerDevices();\n\n          case 2:\n            existingDevices = _context3.sent;\n\n            if (!(existingDevices.length > 0)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", existingDevices[0]);\n\n          case 5:\n            return _context3.abrupt(\"return\", requestLedgerDevice());\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\n\nexport var isSupported = function isSupported() {\n  return Promise.resolve(!!navigator && // $FlowFixMe\n  !!navigator.usb && typeof navigator.usb.getDevices === \"function\");\n};","map":null,"metadata":{},"sourceType":"module"}