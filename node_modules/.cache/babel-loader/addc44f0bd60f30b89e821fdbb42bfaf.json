{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar toString = Object.prototype.toString;\n\nvar kindOf = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol':\n      return 'symbol';\n\n    case 'Promise':\n      return 'promise';\n    // Set, Map, WeakSet, WeakMap\n\n    case 'WeakMap':\n      return 'weakmap';\n\n    case 'WeakSet':\n      return 'weakset';\n\n    case 'Map':\n      return 'map';\n\n    case 'Set':\n      return 'set';\n    // 8-bit typed arrays\n\n    case 'Int8Array':\n      return 'int8array';\n\n    case 'Uint8Array':\n      return 'uint8array';\n\n    case 'Uint8ClampedArray':\n      return 'uint8clampedarray';\n    // 16-bit typed arrays\n\n    case 'Int16Array':\n      return 'int16array';\n\n    case 'Uint16Array':\n      return 'uint16array';\n    // 32-bit typed arrays\n\n    case 'Int32Array':\n      return 'int32array';\n\n    case 'Uint32Array':\n      return 'uint32array';\n\n    case 'Float32Array':\n      return 'float32array';\n\n    case 'Float64Array':\n      return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  } // Non-plain objects\n\n\n  type = toString.call(val);\n\n  switch (type) {\n    case '[object Object]':\n      return 'object';\n    // iterators\n\n    case '[object Map Iterator]':\n      return 'mapiterator';\n\n    case '[object Set Iterator]':\n      return 'setiterator';\n\n    case '[object String Iterator]':\n      return 'stringiterator';\n\n    case '[object Array Iterator]':\n      return 'arrayiterator';\n  } // other\n\n\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string' && typeof val.ignoreCase === 'boolean' && typeof val.multiline === 'boolean' && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function' && typeof val.return === 'function' && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n\n  return false;\n}\n/**\r\n * Superstruct ships by default with an unopinionated set of scalar types that\r\n * express all of the data types that are built-in to JavaScript.\r\n */\n\n\nvar Types = {\n  /**\r\n   * Matches any value other than `undefined`.\r\n   *\r\n   * ```js\r\n   * 'anything'\r\n   * true\r\n   * ```\r\n   */\n  any: function any(value) {\n    return value !== undefined;\n  },\n\n  /**\r\n   * Matches an `arguments` object.\r\n   *\r\n   * ```js\r\n   * arguments\r\n   * ```\r\n   */\n  arguments: function _arguments(value) {\n    return kindOf(value) === 'arguments';\n  },\n\n  /**\r\n   * Matches an `Array`.\r\n   *\r\n   * ```js\r\n   * [1, 2, 3]\r\n   * ```\r\n   */\n  array: function array(value) {\n    return kindOf(value) === 'array';\n  },\n\n  /**\r\n   * Matches a boolean.\r\n   *\r\n   * ```js\r\n   * true\r\n   * false\r\n   * ```\r\n   */\n  boolean: function boolean(value) {\n    return kindOf(value) === 'boolean';\n  },\n\n  /**\r\n   * Matches a Node.js `Buffer`.\r\n   *\r\n   * ```js\r\n   * Buffer.from('string')\r\n   * ```\r\n   */\n  buffer: function buffer(value) {\n    return kindOf(value) === 'buffer';\n  },\n\n  /**\r\n   * Matches a **valid** `Date` object.\r\n   *\r\n   * ```js\r\n   * new Date()\r\n   * ```\r\n   *\r\n   * Note: Invalid `Date` objects that equal `NaN` are not matched.\r\n   */\n  date: function date(value) {\n    return kindOf(value) === 'date' && !isNaN(value);\n  },\n\n  /**\r\n   * Matches an error object.\r\n   *\r\n   * ```js\r\n   * new Error()\r\n   * ```\r\n   */\n  error: function error(value) {\n    return kindOf(value) === 'error';\n  },\n\n  /**\r\n   * Matches a `Float32Array` object.\r\n   */\n  float32array: function float32array(value) {\n    return kindOf(value) === 'float32array';\n  },\n\n  /**\r\n   * Matches a `Float64Array` object.\r\n   */\n  float64array: function float64array(value) {\n    return kindOf(value) === 'float64array';\n  },\n\n  /**\r\n   * Matches a function.\r\n   *\r\n   * ```js\r\n   * () => {}\r\n   * function () {}\r\n   * ```\r\n   */\n  function: function _function(value) {\n    return kindOf(value) === 'function';\n  },\n\n  /**\r\n   * Matches a generator function.\r\n   *\r\n   * ```js\r\n   * function* () {}\r\n   * ```\r\n   */\n  generatorfunction: function generatorfunction(value) {\n    return kindOf(value) === 'generatorfunction';\n  },\n\n  /**\r\n   * Matches a `Int16Array` object.\r\n   */\n  int16array: function int16array(value) {\n    return kindOf(value) === 'int16array';\n  },\n\n  /**\r\n   * Matches a `Int32Array` object.\r\n   */\n  int32array: function int32array(value) {\n    return kindOf(value) === 'int32array';\n  },\n\n  /**\r\n   * Matches a `Int8Array` object.\r\n   */\n  int8array: function int8array(value) {\n    return kindOf(value) === 'int8array';\n  },\n\n  /**\r\n   * Matches a `Map` object.\r\n   *\r\n   * ```js\r\n   * new Map()\r\n   * ```\r\n   */\n  map: function map(value) {\n    return kindOf(value) === 'map';\n  },\n\n  /**\r\n   * Matches the `null` literal value.\r\n   *\r\n   * ```js\r\n   * null\r\n   * ```\r\n   */\n  null: function _null(value) {\n    return kindOf(value) === 'null';\n  },\n\n  /**\r\n   * Matches a number.\r\n   *\r\n   * ```js\r\n   * 42\r\n   * ```\r\n   */\n  number: function number(value) {\n    return kindOf(value) === 'number';\n  },\n\n  /**\r\n   * Matches a plain object.\r\n   *\r\n   * ```js\r\n   * { key: 'value' }\r\n   * { something: true }\r\n   * ```\r\n   */\n  object: function object(value) {\n    return kindOf(value) === 'object';\n  },\n\n  /**\r\n   * Matches a `Promise` object.\r\n   *\r\n   * ```js\r\n   * Promise.resolve()\r\n   * ```\r\n   */\n  promise: function promise(value) {\n    return kindOf(value) === 'promise';\n  },\n\n  /**\r\n   * Matches a regular expression object.\r\n   *\r\n   * ```js\r\n   * /a-z/g\r\n   * ```\r\n   */\n  regexp: function regexp(value) {\n    return kindOf(value) === 'regexp';\n  },\n\n  /**\r\n   * Matches a `Set` object.\r\n   *\r\n   * ```js\r\n   * new Set()\r\n   * ```\r\n   */\n  set: function set(value) {\n    return kindOf(value) === 'set';\n  },\n\n  /**\r\n   * Matches a string.\r\n   *\r\n   * ```js\r\n   * 'text'\r\n   * ```\r\n   */\n  string: function string(value) {\n    return kindOf(value) === 'string';\n  },\n\n  /**\r\n   * Matches a `Symbol`.\r\n   *\r\n   * ```js\r\n   * Symbol()\r\n   * ```\r\n   */\n  symbol: function symbol(value) {\n    return kindOf(value) === 'symbol';\n  },\n\n  /**\r\n   * Matches a `Uint16Array` object.\r\n   */\n  uint16array: function uint16array(value) {\n    return kindOf(value) === 'uint16array';\n  },\n\n  /**\r\n   * Matches a `Uint32Array` object.\r\n   */\n  uint32array: function uint32array(value) {\n    return kindOf(value) === 'uint32array';\n  },\n\n  /**\r\n   * Matches a `Uint8Array` object.\r\n   */\n  uint8array: function uint8array(value) {\n    return kindOf(value) === 'uint8array';\n  },\n\n  /**\r\n   * Matches a `Uint8ClampedArray` object.\r\n   */\n  uint8clampedarray: function uint8clampedarray(value) {\n    return kindOf(value) === 'uint8clampedarray';\n  },\n\n  /**\r\n   * Matches the `undefined` literal value.\r\n   *\r\n   * ```js\r\n   * undefined\r\n   * ```\r\n   */\n  undefined: function undefined$1(value) {\n    return kindOf(value) === 'undefined';\n  },\n\n  /**\r\n   * Matches a `WeakMap` object.\r\n   *\r\n   * ```js\r\n   * new WeakMap()\r\n   * ```\r\n   */\n  weakmap: function weakmap(value) {\n    return kindOf(value) === 'weakmap';\n  },\n\n  /**\r\n   * Matches a `WeakSet` object.\r\n   *\r\n   * ```js\r\n   * new WeakSet()\r\n   * ```\r\n   */\n  weakset: function weakset(value) {\n    return kindOf(value) === 'weakset';\n  }\n};\nvar isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\n\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } else {\n    throw new Error(prefix + \": \" + (message || ''));\n  }\n}\n/**\r\n * `StructError` objects are thrown (or returned) by Superstruct when its\r\n * validation fails. The error represents the first error encountered during\r\n * validation. But they also have an `error.failures` property that holds\r\n * information for all of the failures encountered.\r\n */\n\n\nvar StructError = /*#__PURE__*/function (_TypeError) {\n  _inheritsLoose(StructError, _TypeError);\n\n  function StructError(failures) {\n    var _this;\n\n    invariant(failures.length > 0, \"StructError requires being passed a failure, but received: \" + failures);\n    var first = failures[0];\n\n    var path = first.path,\n        value = first.value,\n        type = first.type,\n        branch = first.branch,\n        rest = _objectWithoutPropertiesLoose(first, [\"path\", \"value\", \"type\", \"branch\"]);\n\n    var message = \"Expected a value of type `\" + type + \"`\" + (path.length ? \" for `\" + path.join('.') + \"`\" : '') + \" but received `\" + JSON.stringify(value) + \"`.\";\n    _this = _TypeError.call(this, message) || this;\n    _this.type = type;\n    _this.value = value;\n    Object.assign(_assertThisInitialized(_this), rest);\n    _this.path = path;\n    _this.branch = branch;\n    _this.failures = failures;\n    _this.stack = new Error().stack;\n    _this.__proto__ = StructError.prototype;\n    return _this;\n  }\n\n  return StructError;\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));\n/**\r\n * A symbol to set on `Struct` objects to test them against later.\r\n */\n\n\nvar STRUCT = Symbol('STRUCT');\n/**\r\n * Check if a value is a `Struct` object.\r\n */\n\nvar isStruct = function isStruct(value) {\n  return typeof value === 'function' && value[STRUCT];\n};\n/**\r\n * This abstract `Struct` factory creates a generic struct that validates values\r\n * against a `Validator` function.\r\n */\n\n\nvar createStruct = function createStruct(props) {\n  var struct = props.struct;\n  var Error = struct.Error;\n\n  var Struct = function Struct(value) {\n    return Struct.assert(value);\n  }; // Set a hidden symbol property so that we can check it later to see if an\n  // object is a struct object.\n\n\n  Object.defineProperty(Struct, STRUCT, {\n    value: true\n  });\n  Struct.kind = props.kind;\n  Struct.type = props.type;\n\n  Struct.default = function () {\n    return typeof props.defaults === 'function' ? props.defaults() : props.defaults;\n  };\n\n  Struct.test = function (value) {\n    var _Struct$check = Struct.check(value, [value], []),\n        failures = _Struct$check[0];\n\n    return !failures;\n  };\n\n  Struct.assert = function (value) {\n    var _Struct$check2 = Struct.check(value, [value], []),\n        failures = _Struct$check2[0],\n        result = _Struct$check2[1];\n\n    if (failures) {\n      throw new Error(failures);\n    } else {\n      return result;\n    }\n  };\n\n  Struct.validate = function (value) {\n    var _Struct$check3 = Struct.check(value, [value], []),\n        failures = _Struct$check3[0],\n        result = _Struct$check3[1];\n\n    if (failures) {\n      return [new Error(failures)];\n    } else {\n      return [undefined, result];\n    }\n  };\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var failures = [Struct.fail({\n      value: value,\n      branch: branch,\n      path: path\n    })];\n    return [failures];\n  };\n\n  Struct.fail = function (obj) {\n    return _objectSpread2(_objectSpread2({}, obj), {}, {\n      type: 'type' in obj ? obj.type : Struct.type\n    });\n  };\n\n  return Struct;\n};\n\nvar createArray = function createArray(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length === 1, \"Array structs must be defined as an array with one element, but you passed: \" + schema);\n  var Element = struct(schema[0], undefined);\n  var Struct = createStruct({\n    kind: 'array',\n    type: Element.type + \"[]\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    if (!Array.isArray(value)) {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = [];\n    var failures = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var v = value[i];\n\n      var _Element$check = Element.check(v, branch.concat(v), path.concat(i)),\n          efs = _Element$check[0],\n          er = _Element$check[1];\n\n      if (efs) {\n        failures.push.apply(failures, efs);\n        continue;\n      }\n\n      result[i] = er;\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createDynamic = function createDynamic(schema, defaults, struct) {\n  invariant(typeof schema === 'function', \"Dynamic structs must be defined as a function, but you passed: \" + schema);\n  var Dynamic = createStruct({\n    kind: 'dynamic',\n    type: \"dynamic<\\u2026>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Dynamic.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Dynamic.default();\n    }\n\n    var Struct = schema(value, branch, path);\n    return Struct.check(value, branch, path);\n  };\n\n  return Dynamic;\n};\n\nvar createEnum = function createEnum(schema, defaults, struct) {\n  invariant(Array.isArray(schema), \"Enum structs must be defined as an array, but you passed: \" + schema);\n\n  var validator = function validator(value) {\n    return schema.includes(value);\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'enum';\n  Struct.type = schema.map(function (s) {\n    return typeof s === 'string' ? \"\\\"\" + s + \"\\\"\" : \"\" + s;\n  }).join(' | ');\n  return Struct;\n};\n\nvar createFunction = function createFunction(schema, defaults, struct) {\n  var Struct = createStruct({\n    kind: 'function',\n    type: \"function<\\u2026>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var result = schema(value, branch, path);\n\n    if (result === true) {\n      return [undefined, value];\n    }\n\n    var failures = [];\n\n    if (result === false) {\n      failures.push(Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      }));\n    } else if (Array.isArray(result) && result.length > 0) {\n      for (var _iterator = _createForOfIteratorHelperLoose(result), _step; !(_step = _iterator()).done;) {\n        var r = _step.value;\n        failures.push(Struct.fail(_objectSpread2({\n          value: value,\n          branch: branch,\n          path: path\n        }, r)));\n      }\n    } else if (typeof result === 'object') {\n      failures.push(Struct.fail(_objectSpread2({\n        value: value,\n        branch: branch,\n        path: path\n      }, result)));\n    } else {\n      invariant(false, \"Validator functions must return a boolean, a failure object, or an array of failure objects, but you passed: \" + result);\n    }\n\n    return [failures];\n  };\n\n  return Struct;\n};\n\nvar createInstance = function createInstance(schema, defaults, struct) {\n  invariant(typeof schema === 'function', \"Instance structs must be defined as a function, but you passed: \" + schema);\n\n  var validator = function validator(value) {\n    return value instanceof schema;\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'instance';\n  Struct.type = \"instance<\" + schema.name + \">\";\n  return Struct;\n};\n\nvar createInterface = function createInterface(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Interface structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct(schema[key]);\n  }\n\n  var Struct = createStruct({\n    kind: 'interface',\n    type: \"interface<{\" + Object.keys(schema).join() + \"}>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    if (typeof value !== 'object' && typeof value !== 'function') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var failures = [];\n\n    for (var k in Props) {\n      var Prop = Props[k];\n      var v = value[k];\n\n      var _Prop$check = Prop.check(v, branch.concat(v), path.concat(k)),\n          pfs = _Prop$check[0];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, value];\n  };\n\n  return Struct;\n};\n\nvar createIntersection = function createIntersection(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length !== 0, \"Intersection structs must be defined as a non-empty array, but you passed: \" + schema);\n  var Structs = schema.map(function (sch) {\n    return struct(sch);\n  });\n  var type = Structs.map(function (s) {\n    return s.type;\n  }).join(' & ');\n  var Struct = createStruct({\n    kind: 'intersection',\n    type: type,\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var result = value;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(Structs), _step; !(_step = _iterator()).done;) {\n      var _struct = _step.value;\n\n      var _struct$check = _struct.check(value, branch, path),\n          fs = _struct$check[0],\n          v = _struct$check[1];\n\n      if (fs) {\n        return [[Struct.fail({\n          value: value,\n          branch: branch,\n          path: path\n        })]];\n      } else {\n        result = v;\n      }\n    }\n\n    return [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createLazy = function createLazy(schema, defaults, struct) {\n  invariant(typeof schema === 'function', \"Lazy structs must be defined as a function, but you passed: \" + schema);\n  var Lazy = createStruct({\n    kind: 'lazy',\n    type: \"lazy<\\u2026>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Lazy.check = function () {\n    Object.assign(Lazy, schema());\n    return Lazy.check.apply(Lazy, arguments);\n  };\n\n  return Lazy;\n};\n\nvar createSize = function createSize(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length === 2 && schema.every(function (n) {\n    return typeof n === 'number';\n  }), \"Size structs must be defined as an array with two number elements, but you passed: \" + schema);\n  var min = schema[0],\n      max = schema[1];\n\n  var validator = function validator(value) {\n    return value != null && typeof value.length === 'number' && value.length >= min && value.length <= max;\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'size';\n  Struct.type = \"size<\" + min + \",\" + max + \">\";\n  return Struct;\n};\n\nvar createLiteral = function createLiteral(schema, defaults, struct) {\n  var validator = function validator(value) {\n    return value === schema;\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'literal';\n  Struct.type = typeof schema === 'string' ? \"\\\"\" + schema + \"\\\"\" : \"\" + schema;\n  return Struct;\n};\n\nvar createObject = function createObject(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Object structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct(schema[key]);\n  }\n\n  var Struct = createStruct({\n    kind: 'object',\n    type: \"{\" + Object.keys(schema).join() + \"}\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var d = Struct.default();\n\n    if (value === undefined) {\n      value = d;\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n    var keys = new Set(Object.keys(Props).concat(Object.keys(value)));\n\n    for (var _iterator = _createForOfIteratorHelperLoose(keys), _step; !(_step = _iterator()).done;) {\n      var k = _step.value;\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n      var Prop = Props[k];\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k];\n      }\n\n      if (!(k in Props)) {\n        failures.push(Struct.fail({\n          type: undefined,\n          value: v,\n          path: p,\n          branch: value\n        }));\n        continue;\n      }\n\n      var _Prop$check = Prop.check(v, b, p),\n          pfs = _Prop$check[0],\n          pr = _Prop$check[1];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr;\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createPartial = function createPartial(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Partial structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct.union([schema[key], 'undefined']);\n  }\n\n  var Struct = createStruct({\n    kind: 'object',\n    type: \"{\" + Object.keys(schema).join() + \"}\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var d = Struct.default();\n\n    if (value === undefined) {\n      value = d;\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(value), _step; !(_step = _iterator()).done;) {\n      var k = _step.value;\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n      var Prop = Props[k];\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k];\n      }\n\n      if (!(k in Props)) {\n        failures.push(Struct.fail({\n          type: undefined,\n          value: v,\n          path: p,\n          branch: value\n        }));\n        continue;\n      }\n\n      var _Prop$check = Prop.check(v, b, p),\n          pfs = _Prop$check[0],\n          pr = _Prop$check[1];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr;\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createPick = function createPick(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Pick structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct(schema[key]);\n  }\n\n  var Struct = createStruct({\n    kind: 'pick',\n    type: \"pick<{\" + Object.keys(schema).join() + \"}>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var d = Struct.default();\n\n    if (value === undefined) {\n      value = d;\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n\n    for (var k in Props) {\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n      var Prop = Props[k];\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k];\n      }\n\n      var _Prop$check = Prop.check(v, b, p),\n          pfs = _Prop$check[0],\n          pr = _Prop$check[1];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr;\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createRecord = function createRecord(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length === 2, \"Record structs must be defined as an array with two elements, but you passed: \" + schema);\n  var Key = struct(schema[0]);\n  var Value = struct(schema[1]);\n  var Struct = createStruct({\n    kind: 'record',\n    type: \"record<\" + Key.type + \",\" + Value.type + \">\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    // Record structs have a special default handling behavior, where the defaults\n    // are for the entries themselves, not for the entire value. So we can't use\n    // JavaScript's built-in default handling here.\n    var defs = Struct.default();\n    value = defs ? _objectSpread2(_objectSpread2({}, defs), value) : value;\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n\n    for (var k in value) {\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n\n      var _Key$check = Key.check(k, b, p),\n          kfs = _Key$check[0],\n          kr = _Key$check[1];\n\n      if (kfs) {\n        failures.push.apply(failures, kfs);\n      } else {\n        var _Value$check = Value.check(v, b, p),\n            vfs = _Value$check[0],\n            vr = _Value$check[1];\n\n        if (vfs) {\n          failures.push.apply(failures, vfs);\n        } else {\n          result[kr] = vr;\n        }\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createScalar = function createScalar(schema, defaults, struct) {\n  invariant(typeof schema === 'string', \"Scalar structs must be defined as a string, but you passed: \" + schema);\n  var Types = struct.Types;\n  invariant(schema in Types, \"No struct validator function found for type \\\"\" + schema + \"\\\".\");\n  var Struct = struct(Types[schema], defaults);\n  Struct.kind = 'scalar';\n  Struct.type = schema;\n  return Struct;\n};\n\nvar createShorthand = function createShorthand(schema, defaults, struct) {\n  if (isStruct(schema)) {\n    return schema;\n  }\n\n  if (Array.isArray(schema)) {\n    if (schema.length === 1) {\n      var _schema = schema,\n          first = _schema[0];\n      return struct.array([first], defaults);\n    } else if (schema.length > 1) {\n      return struct.tuple(schema, defaults);\n    }\n  }\n\n  if (typeof schema === 'function') {\n    return struct.function(schema, defaults);\n  }\n\n  if (typeof schema === 'object') {\n    return struct.object(schema, defaults);\n  }\n\n  if (typeof schema === 'string') {\n    var optional = false;\n    var Struct;\n\n    if (schema.endsWith('?')) {\n      optional = true;\n      schema = schema.slice(0, -1);\n    }\n\n    if (schema.includes('|')) {\n      var scalars = schema.split(/\\s*\\|\\s*/g);\n      Struct = struct.union(scalars, defaults);\n    } else if (schema.includes('&')) {\n      var _scalars = schema.split(/\\s*&\\s*/g);\n\n      Struct = struct.intersection(_scalars, defaults);\n    } else {\n      Struct = struct.scalar(schema, defaults);\n    }\n\n    if (optional) {\n      Struct = struct.union([Struct, 'undefined'], undefined);\n    }\n\n    return Struct;\n  }\n\n  throw new Error(\"A schema definition must be an object, array, string or function, but you passed: \" + schema);\n};\n\nvar createTuple = function createTuple(schema, defaults, struct) {\n  invariant(Array.isArray(schema), \"Tuple structs must be defined as an array, but you passed: \" + schema);\n  var Elements = schema.map(function (s) {\n    return struct(s);\n  });\n  var Struct = createStruct({\n    kind: 'tuple',\n    type: \"[\" + Elements.map(function (S) {\n      return S.type;\n    }).join() + \"]\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    if (!Array.isArray(value)) {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = [];\n    var failures = [];\n    var length = Math.max(value.length, Elements.length);\n\n    for (var i = 0; i < length; i++) {\n      var Element = Elements[i];\n      var v = value[i];\n      var p = path.concat(i);\n      var b = branch.concat(v);\n\n      if (!Element) {\n        failures.push(Struct.fail({\n          type: undefined,\n          value: v,\n          path: p,\n          branch: b\n        }));\n      } else {\n        var _Element$check = Element.check(v, b, p),\n            efs = _Element$check[0],\n            er = _Element$check[1];\n\n        if (efs) {\n          failures.push.apply(failures, efs);\n        } else {\n          result[i] = er;\n        }\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createUnion = function createUnion(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length !== 0, \"Union structs must be defined as a non-empty array, but you passed: \" + schema);\n  var Structs = schema.map(function (sch) {\n    return struct(sch);\n  });\n  var type = Structs.map(function (s) {\n    return s.type;\n  }).join(' | ');\n  var Struct = createStruct({\n    kind: 'union',\n    type: type,\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(Structs), _step; !(_step = _iterator()).done;) {\n      var _struct = _step.value;\n\n      var _struct$check = _struct.check(value, branch, path),\n          fs = _struct$check[0],\n          v = _struct$check[1];\n\n      if (!fs) {\n        return [undefined, v];\n      }\n    }\n\n    return [[Struct.fail({\n      value: value,\n      branch: branch,\n      path: path\n    })]];\n  };\n\n  return Struct;\n};\n/**\r\n * Create a struct singleton with settings that include your own domain-specific\r\n * data `types`, and an optional custom `Error` class.\r\n */\n\n\nvar superstruct = function superstruct(settings) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  var struct = function struct(schema, defaults) {\n    return createShorthand(schema, defaults, struct);\n  };\n\n  struct.array = function (schema, defaults) {\n    return createArray(schema, defaults, struct);\n  };\n\n  struct.dynamic = function (schema, defaults) {\n    return createDynamic(schema, defaults, struct);\n  };\n\n  struct.enum = function (schema, defaults) {\n    return createEnum(schema, defaults, struct);\n  };\n\n  struct.function = function (schema, defaults) {\n    return createFunction(schema, defaults, struct);\n  };\n\n  struct.instance = function (schema, defaults) {\n    return createInstance(schema, defaults, struct);\n  };\n\n  struct.interface = function (schema, defaults) {\n    return createInterface(schema, defaults, struct);\n  };\n\n  struct.intersection = function (schema, defaults) {\n    return createIntersection(schema, defaults, struct);\n  };\n\n  struct.lazy = function (schema, defaults) {\n    return createLazy(schema, defaults, struct);\n  };\n\n  struct.literal = function (schema, defaults) {\n    return createLiteral(schema, defaults, struct);\n  };\n\n  struct.object = function (schema, defaults) {\n    return createObject(schema, defaults, struct);\n  };\n\n  struct.optional = function (schema, defaults) {\n    return createUnion([schema, 'undefined'], defaults, struct);\n  };\n\n  struct.partial = function (schema, defaults) {\n    return createPartial(schema, defaults, struct);\n  };\n\n  struct.pick = function (schema, defaults) {\n    return createPick(schema, defaults, struct);\n  };\n\n  struct.record = function (schema, defaults) {\n    return createRecord(schema, defaults, struct);\n  };\n\n  struct.scalar = function (schema, defaults) {\n    return createScalar(schema, defaults, struct);\n  };\n\n  struct.size = function (schema, defaults) {\n    return createSize(schema, defaults, struct);\n  };\n\n  struct.tuple = function (schema, defaults) {\n    return createTuple(schema, defaults, struct);\n  };\n\n  struct.union = function (schema, defaults) {\n    return createUnion(schema, defaults, struct);\n  };\n\n  struct.Error = settings.error || StructError;\n  struct.Types = _objectSpread2(_objectSpread2({}, Types), settings.types);\n  return struct;\n};\n/**\r\n * The singleton instance of Superstruct that is exported by default, configured\r\n * with types for all of the JavaScript built-in data types.\r\n *\r\n * You can use it if you don't need any custom types. However, if you do want to\r\n * define custom types, use the [[superstruct]] factory to configure your own\r\n * [[Superstruct]] instance.\r\n */\n\n\nvar struct = superstruct();\nexport { StructError, Types, isStruct, struct, superstruct };","map":null,"metadata":{},"sourceType":"module"}