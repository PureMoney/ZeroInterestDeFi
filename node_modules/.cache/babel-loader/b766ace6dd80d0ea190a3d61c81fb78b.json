{"ast":null,"code":"/* eslint-env browser */\n\n/* global globalThis:readonly */\n'use strict'; // Ponyfill for `globalThis`\n\nvar _regeneratorRuntime = require(\"/home/ctapang/dapp-scaffold/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/ctapang/dapp-scaffold/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/ctapang/dapp-scaffold/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _globalThis = function () {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  /* istanbul ignore next */\n\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  /* istanbul ignore next */\n\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n}();\n\nvar bufferToHex = function bufferToHex(buffer) {\n  var view = new DataView(buffer);\n  var hexCodes = '';\n\n  for (var i = 0; i < view.byteLength; i += 4) {\n    hexCodes += view.getUint32(i).toString(16).padStart(8, '0');\n  }\n\n  return hexCodes;\n};\n\nvar create = function create(algorithm) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buffer, options) {\n      var hash;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (typeof buffer === 'string') {\n                buffer = new _globalThis.TextEncoder().encode(buffer);\n              }\n\n              options = _objectSpread({\n                outputFormat: 'hex'\n              }, options);\n              _context.next = 4;\n              return _globalThis.crypto.subtle.digest(algorithm, buffer);\n\n            case 4:\n              hash = _context.sent;\n              return _context.abrupt(\"return\", options.outputFormat === 'hex' ? bufferToHex(hash) : hash);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.sha1 = create('SHA-1');\nexports.sha256 = create('SHA-256');\nexports.sha384 = create('SHA-384');\nexports.sha512 = create('SHA-512');","map":null,"metadata":{},"sourceType":"script"}